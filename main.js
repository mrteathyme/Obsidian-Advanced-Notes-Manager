/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DailyActivityTrackerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DailyActivityTrackerPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.create_event_handler = async (created) => {
      if (created instanceof import_obsidian.TFile) {
        let today = new Date();
        let dateformatted = today.getFullYear() + "-" + String(today.getMonth() + 1).padStart(2, "0") + "-" + String(today.getDate()).padStart(2, "0");
        let folderPath = (0, import_obsidian.normalizePath)(`${dateformatted}`);
        if (created.extension !== "md") {
          folderPath = (0, import_obsidian.normalizePath)(folderPath + "/Attachments");
        }
        if (this.app.vault.getAbstractFileByPath(folderPath) == null) {
          await this.app.vault.createFolder(folderPath);
          new import_obsidian.Notice(`created new daily folder: ${folderPath}`);
        }
        if (app.vault.getAbstractFileByPath((0, import_obsidian.normalizePath)(folderPath + "/" + created.basename + "." + created.extension)) !== null) {
          new import_obsidian.Notice(`Failed to move ${created.basename + created.extension} to ${folderPath} a note with that name already exists`);
          return;
        }
        if (folderPath + "/" + created.basename + "." + created.extension === created.path) {
          return;
        }
        await this.app.vault.rename(created, folderPath + "/" + created.basename + "." + created.extension);
        new import_obsidian.Notice(`Moved "${created.basename + "." + created.extension}" to ${folderPath}`);
      }
    };
    this.updateDailyNote = async (file) => {
      if (file !== null) {
        let today = new Date();
        let dateformatted = today.getFullYear() + "-" + String(today.getMonth() + 1).padStart(2, "0") + "-" + String(today.getDate()).padStart(2, "0");
        let dailyNoteName = `${dateformatted}.md`;
        let folderPath = `${dateformatted}`;
        let dailyNote = this.app.vault.getAbstractFileByPath((0, import_obsidian.normalizePath)(folderPath + "/" + dailyNoteName));
        if (dailyNote == null) {
          dailyNote = await this.app.vault.create(dailyNoteName, "---\nTags: [daily, organisation]\n---\n\n");
          new import_obsidian.Notice(`created daily note: ${dailyNoteName}`);
        }
        if (dailyNote instanceof import_obsidian.TFile) {
          let text = await this.app.vault.read(dailyNote);
          if (!text.contains(`[[${file.basename}]]`) && `${file.basename}.${file.extension}` !== dailyNoteName) {
            await this.app.vault.modify(dailyNote, text + `[[${file.basename}]]
`);
          }
        }
      }
    };
  }
  async onload() {
    this.app.workspace.onLayoutReady(() => {
      this.registerEvent(this.app.vault.on("create", this.create_event_handler));
      this.registerEvent(this.app.workspace.on("file-open", this.updateDailyNote));
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtQbHVnaW4sIFRGaWxlLCBOb3RpY2UsIFRBYnN0cmFjdEZpbGUsIG5vcm1hbGl6ZVBhdGh9IGZyb20gJ29ic2lkaWFuJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYWlseUFjdGl2aXR5VHJhY2tlclBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gICAgYXN5bmMgb25sb2FkKCkge1xuICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub25MYXlvdXRSZWFkeSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5hcHAudmF1bHQub24oJ2NyZWF0ZScsdGhpcy5jcmVhdGVfZXZlbnRfaGFuZGxlcikpO1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50KHRoaXMuYXBwLndvcmtzcGFjZS5vbignZmlsZS1vcGVuJyx0aGlzLnVwZGF0ZURhaWx5Tm90ZSkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cblx0b251bmxvYWQoKSB7XG5cblx0fVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVfZXZlbnRfaGFuZGxlciA9IGFzeW5jIChjcmVhdGVkOiBUQWJzdHJhY3RGaWxlKSA9PiB7XG4gICAgICAgIGlmIChjcmVhdGVkIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgIGxldCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICBsZXQgZGF0ZWZvcm1hdHRlZCA9IHRvZGF5LmdldEZ1bGxZZWFyKCkgKyAnLScgKyBTdHJpbmcodG9kYXkuZ2V0TW9udGgoKSArIDEpLnBhZFN0YXJ0KDIsICcwJykgKyAnLScgKyBTdHJpbmcodG9kYXkuZ2V0RGF0ZSgpKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgICAgICAgICAgbGV0IGZvbGRlclBhdGggPSBub3JtYWxpemVQYXRoKGAke2RhdGVmb3JtYXR0ZWR9YCk7XG4gICAgICAgICAgICBpZiAoY3JlYXRlZC5leHRlbnNpb24gIT09ICdtZCcpIHtcbiAgICAgICAgICAgICAgICBmb2xkZXJQYXRoID0gbm9ybWFsaXplUGF0aChmb2xkZXJQYXRoICsgJy9BdHRhY2htZW50cycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmb2xkZXJQYXRoKSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQuY3JlYXRlRm9sZGVyKGZvbGRlclBhdGgpO1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYGNyZWF0ZWQgbmV3IGRhaWx5IGZvbGRlcjogJHtmb2xkZXJQYXRofWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgobm9ybWFsaXplUGF0aChmb2xkZXJQYXRoICsgJy8nICsgY3JlYXRlZC5iYXNlbmFtZSArICcuJyArIGNyZWF0ZWQuZXh0ZW5zaW9uKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBGYWlsZWQgdG8gbW92ZSAke2NyZWF0ZWQuYmFzZW5hbWUgKyBjcmVhdGVkLmV4dGVuc2lvbn0gdG8gJHtmb2xkZXJQYXRofSBhIG5vdGUgd2l0aCB0aGF0IG5hbWUgYWxyZWFkeSBleGlzdHNgKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZm9sZGVyUGF0aCArICcvJyArIGNyZWF0ZWQuYmFzZW5hbWUgICsgJy4nICsgY3JlYXRlZC5leHRlbnNpb24gPT09IGNyZWF0ZWQucGF0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlbmFtZShjcmVhdGVkLCBmb2xkZXJQYXRoICsgJy8nICsgY3JlYXRlZC5iYXNlbmFtZSAgKyAnLicgKyBjcmVhdGVkLmV4dGVuc2lvbilcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYE1vdmVkIFwiJHtjcmVhdGVkLmJhc2VuYW1lICArICcuJyArIGNyZWF0ZWQuZXh0ZW5zaW9ufVwiIHRvICR7Zm9sZGVyUGF0aH1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlRGFpbHlOb3RlID0gYXN5bmMgKGZpbGU6IFRGaWxlIHwgbnVsbCkgPT4ge1xuICAgICAgICBpZiAoZmlsZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIGxldCBkYXRlZm9ybWF0dGVkID0gdG9kYXkuZ2V0RnVsbFllYXIoKSArICctJyArIFN0cmluZyh0b2RheS5nZXRNb250aCgpICsgMSkucGFkU3RhcnQoMiwgJzAnKSArICctJyArIFN0cmluZyh0b2RheS5nZXREYXRlKCkpLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgICAgICAgICBsZXQgZGFpbHlOb3RlTmFtZSA9IGAke2RhdGVmb3JtYXR0ZWR9Lm1kYDtcbiAgICAgICAgICAgIGxldCBmb2xkZXJQYXRoID0gYCR7ZGF0ZWZvcm1hdHRlZH1gO1xuICAgICAgICAgICAgbGV0IGRhaWx5Tm90ZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChub3JtYWxpemVQYXRoKGZvbGRlclBhdGggKyAnLycgKyBkYWlseU5vdGVOYW1lKSk7XG4gICAgICAgICAgICBpZiAoZGFpbHlOb3RlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvL1RvRG86IEFkZCBUZW1wbGF0ZSBTZXR0aW5ncyBhbmQgVGFnIHNldHRpbmdzLCBqdXN0IGdvbm5hIGhhcmRjb2RlIHdpdGggdGhlIHRhZ3MgaSB1c2UgZm9yIG5vd1xuICAgICAgICAgICAgICAgIGRhaWx5Tm90ZSA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZShkYWlseU5vdGVOYW1lLCBcIi0tLVxcblRhZ3M6IFtkYWlseSwgb3JnYW5pc2F0aW9uXVxcbi0tLVxcblxcblwiKTtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBjcmVhdGVkIGRhaWx5IG5vdGU6ICR7ZGFpbHlOb3RlTmFtZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYWlseU5vdGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgIC8vVG9EbzogU2VjdGlvbiBGb3JtYXR0aW5nIGluc3RlYWQgb2YganVzdCBhcHBlbmRpbmdcbiAgICAgICAgICAgICAgICBsZXQgdGV4dCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZGFpbHlOb3RlKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRleHQuY29udGFpbnMoYFtbJHtmaWxlLmJhc2VuYW1lfV1dYCkgJiYgYCR7ZmlsZS5iYXNlbmFtZX0uJHtmaWxlLmV4dGVuc2lvbn1gICE9PSBkYWlseU5vdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0Lm1vZGlmeShkYWlseU5vdGUsdGV4dCArIGBbWyR7ZmlsZS5iYXNlbmFtZX1dXVxcbmApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbi8qIFRvZG86IEFkZCBDb21tYW5kIHRvIHByb2Nlc3MgZXhpc3RpbmcgZmlsZXMgYW5kIGNyZWF0ZSBkYWlseSBmb2xkZXJzIGZvciBlYWNoIGFuZCBtb3ZlIHRoZW0gdGhlcmVcbkNhbiB1c2UgdGhlIGN0aW1lIHByb3BlcnR5IG9mIHRoZSBGaWxlU3RhdHMgVHlwZSB0aGF0IGlzIHJldHVybmVkIGZyb20gVEZpbGUuc3RhdCwgYXBpIGRvY3Mgc2F5IGl0cyBhIG51bWJlciBzbyBpbSBnb2luZyB0byBhc3N1bWUgaXRzIGluIHVuaXh0aW1lXG5cblNvIHNvbWV0aGluZyBsaWtlIGlmICh0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoc29tZUZ1bmN0aW9uVGhhdENvbnZlcnRzVW5peFRvTG9jYWxUaW1lWm9uZShmaWxlLnN0YXQuY3RpbWUpKSA9PSBudWxsKSBjcmVhdGVGb2xkZXIgdGhlbiBkbyBtb3ZlIGV0YyBldGMqLyJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBa0U7QUFFbEUsSUFBcUIsNkJBQXJCLGNBQXdELHVCQUFPO0FBQUEsRUFBL0Q7QUFBQTtBQVlJLFNBQVEsdUJBQXVCLE9BQU8sWUFBMkI7QUFDN0QsVUFBSSxtQkFBbUIsdUJBQU87QUFDMUIsWUFBSSxRQUFRLElBQUksS0FBSztBQUNyQixZQUFJLGdCQUFnQixNQUFNLFlBQVksSUFBSSxNQUFNLE9BQU8sTUFBTSxTQUFTLElBQUksQ0FBQyxFQUFFLFNBQVMsR0FBRyxHQUFHLElBQUksTUFBTSxPQUFPLE1BQU0sUUFBUSxDQUFDLEVBQUUsU0FBUyxHQUFHLEdBQUc7QUFDN0ksWUFBSSxhQUFhLG1DQUFjLEdBQUcsZUFBZTtBQUNqRCxZQUFJLFFBQVEsY0FBYyxNQUFNO0FBQzVCLHVCQUFhLG1DQUFjLGFBQWEsY0FBYztBQUFBLFFBQzFEO0FBQ0EsWUFBSSxLQUFLLElBQUksTUFBTSxzQkFBc0IsVUFBVSxLQUFLLE1BQU07QUFDMUQsZ0JBQU0sS0FBSyxJQUFJLE1BQU0sYUFBYSxVQUFVO0FBQzVDLGNBQUksdUJBQU8sNkJBQTZCLFlBQVk7QUFBQSxRQUN4RDtBQUNBLFlBQUksSUFBSSxNQUFNLHNCQUFzQixtQ0FBYyxhQUFhLE1BQU0sUUFBUSxXQUFXLE1BQU0sUUFBUSxTQUFTLENBQUMsTUFBTSxNQUFNO0FBQ3hILGNBQUksdUJBQU8sa0JBQWtCLFFBQVEsV0FBVyxRQUFRLGdCQUFnQixpREFBaUQ7QUFDekg7QUFBQSxRQUNKO0FBQ0EsWUFBSSxhQUFhLE1BQU0sUUFBUSxXQUFZLE1BQU0sUUFBUSxjQUFjLFFBQVEsTUFBTTtBQUNqRjtBQUFBLFFBQ0o7QUFDQSxjQUFNLEtBQUssSUFBSSxNQUFNLE9BQU8sU0FBUyxhQUFhLE1BQU0sUUFBUSxXQUFZLE1BQU0sUUFBUSxTQUFTO0FBQ25HLFlBQUksdUJBQU8sVUFBVSxRQUFRLFdBQVksTUFBTSxRQUFRLGlCQUFpQixZQUFZO0FBQUEsTUFDeEY7QUFBQSxJQUNKO0FBRUEsU0FBUSxrQkFBa0IsT0FBTyxTQUF1QjtBQUNwRCxVQUFJLFNBQVMsTUFBTTtBQUNmLFlBQUksUUFBUSxJQUFJLEtBQUs7QUFDckIsWUFBSSxnQkFBZ0IsTUFBTSxZQUFZLElBQUksTUFBTSxPQUFPLE1BQU0sU0FBUyxJQUFJLENBQUMsRUFBRSxTQUFTLEdBQUcsR0FBRyxJQUFJLE1BQU0sT0FBTyxNQUFNLFFBQVEsQ0FBQyxFQUFFLFNBQVMsR0FBRyxHQUFHO0FBQzdJLFlBQUksZ0JBQWdCLEdBQUc7QUFDdkIsWUFBSSxhQUFhLEdBQUc7QUFDcEIsWUFBSSxZQUFZLEtBQUssSUFBSSxNQUFNLHNCQUFzQixtQ0FBYyxhQUFhLE1BQU0sYUFBYSxDQUFDO0FBQ3BHLFlBQUksYUFBYSxNQUFNO0FBRW5CLHNCQUFZLE1BQU0sS0FBSyxJQUFJLE1BQU0sT0FBTyxlQUFlLDJDQUEyQztBQUNsRyxjQUFJLHVCQUFPLHVCQUF1QixlQUFlO0FBQUEsUUFDckQ7QUFDQSxZQUFJLHFCQUFxQix1QkFBTztBQUU1QixjQUFJLE9BQU8sTUFBTSxLQUFLLElBQUksTUFBTSxLQUFLLFNBQVM7QUFDOUMsY0FBSSxDQUFDLEtBQUssU0FBUyxLQUFLLEtBQUssWUFBWSxLQUFLLEdBQUcsS0FBSyxZQUFZLEtBQUssZ0JBQWdCLGVBQWU7QUFDbEcsa0JBQU0sS0FBSyxJQUFJLE1BQU0sT0FBTyxXQUFVLE9BQU8sS0FBSyxLQUFLO0FBQUEsQ0FBYztBQUFBLFVBQ3pFO0FBQUEsUUFDSjtBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBQUE7QUFBQSxFQXZEQSxNQUFNLFNBQVM7QUFDWCxTQUFLLElBQUksVUFBVSxjQUFjLE1BQU07QUFDbkMsV0FBSyxjQUFjLEtBQUssSUFBSSxNQUFNLEdBQUcsVUFBUyxLQUFLLG9CQUFvQixDQUFDO0FBQ3hFLFdBQUssY0FBYyxLQUFLLElBQUksVUFBVSxHQUFHLGFBQVksS0FBSyxlQUFlLENBQUM7QUFBQSxJQUM5RSxDQUFDO0FBQUEsRUFDTDtBQUFBLEVBRUgsV0FBVztBQUFBLEVBRVg7QUErQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
